#This time we need to create a shifted window that goes all over our array.
class Solution:
    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:
        n=len(nums)
        bitCount=[0]*32
        currentOr=0
        left=0
        result=float('inf')

        for right in range(n):
            currentOr |=nums[right]

            for bit in range(32):
                if nums[right] & (1<<bit):
                    bitCount[bit]+=1
            
            while left<=right and currentOr>=k:
                result=min(result,right-left+1)
            
                updatedOr=0
                for bit in range(32):
                    if nums[left] & (1<<bit):
                        bitCount[bit]-=1
                    if bitCount[bit]>0:
                        updatedOr |=(1<<bit)

                currentOr=updatedOr
                left+=1
        
        return result if result!=float('inf') else -1

#The problem is about finding a valid Eulerian path in a directed graph formed by the input pairs. An Eulerian path is a trail in a graph that visits every edge exactly once. If we can construct such a path, the result is guaranteed to be valid.
class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:
        # graph represents adjacency list, inOutDeg tracks in/out degree difference
        graph = defaultdict(list)
        inOutDeg = defaultdict(int)

        # Build graph and count in/out degrees
        for start, end in pairs:
            graph[start].append(end)
            inOutDeg[start] += 1  # it counts how many times you  see the start. So at the begin you put at 5:1..but then when you see it as 'end' you do minus 1. So it goes to 1.
            inOutDeg[end] -= 1   

        # Find starting node 
        startNode = pairs[0][0] 
        for node in inOutDeg:
            if inOutDeg[node] == 1: #if this is 1 it means that it appears only once
                startNode = node
                break

        path = []
        def dfs(curr): #typicall dfs
            while graph[curr]:
                nextNode = graph[curr].pop()
                dfs(nextNode)
                path.append((curr, nextNode))

        dfs(startNode)
        return path[::-1]

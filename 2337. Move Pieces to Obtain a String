#two pointers. Start at the same time at both strings, if it finds a '_' just +1 to the count. If it finds a 'L' at the start string checks that
#its at a position where at the target isn't an L righter, i<j, cause you cant move that L righter. 
class Solution:
    def canChange(self, start: str, target: str) -> bool:
        if start==target:
            return True
        i, j, n = 0, 0, len(start)
        
        while i < n or j < n:
            while i < n and start[i] == '_':
                i += 1
            while j < n and target[j] == '_':
                j += 1
            
            if i == n or j == n:
                break
            if start[i] != target[j]:
                return False
            if start[i] == 'L' and i < j:
                return False
            if start[i] == 'R' and i > j:
                return False
            
            i += 1
            j += 1
        
        return i == n and j == n

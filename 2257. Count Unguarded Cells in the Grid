#To solve this we need a grid[][] so we can simulate this game. We put all the walls and guards in and with the help of
#directions =[(-1,0),(1,0),(0,-1),(0,1)] we gonna move in this map.
class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        #first we gonna build our grid and put the walls and guards.
        grid= [[0]*n for _ in range(m)]
        # 0=unoccupied, 1=wall/guard, 2=guarded
        #for guards
        for row,col in guards:
            grid[row][col]=1

        #for walls
        for row,col in walls:    
            grid[row][col]=1
        
        #directions a guard can see: up, down, left , right
        directions =[(-1,0),(1,0),(0,-1),(0,1)]

        #mark cells guarded
        for row, col in guards:
            for dir_row,dir_col in directions:
                new_row,new_col=row+dir_row, col+dir_col
                while 0<=new_row<m and 0<=new_col<n:
                    if grid[new_row][new_col]==1:
                        break #there is a wall or guard
                    if grid[new_row][new_col]==0:
                        grid[new_row][new_col]=2 #mark as guarded
                    new_row+=dir_row
                    new_col+=dir_col

        result= sum(1 for row in range(m) for col in range(n) if grid[row][col]==0)

        return result

##Για να λύσουμε αυτό το πρόβλημα, θα χρησιμοποιήσουμε αναδρομή με αποθήκευση των ενδιάμεσων αποτελεσμάτων (memoization). Η λογική είναι να ξεκινήσουμε από κάθε κελί στην πρώτη στήλη και να βρούμε τον μέγιστο αριθμό κινήσεων που μπορούμε να κάνουμε, ακολουθώντας τους επιτρεπόμενους κανόνες μετακίνησης.##
from functools import lru_cache
class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
    
        m, n = len(grid), len(grid[0])

    #lru_cache=least recently used cache. Eiani enas decorator stin python o opoios krataei stin cache ta teleftea apotelesmata sunartiseon mexri na ftasei se ena orio. To None simenei oti den yparxei orio. Etsi den xriazete na ginete ipologismos olon ton kelion polles fores.
        @lru_cache(None)
        def dfs(row, col):
        # Βασική περίπτωση: αν φτάσουμε στο τέλος της στήλης, δεν μπορούμε να κινηθούμε περαιτέρω
            if col == n - 1:
                return 0
        
            max_move = 0
        # Εξετάζουμε τις τρεις δυνατές κινήσεις
            for d_row in [-1, 0, 1]:
                new_row, new_col = row + d_row, col + 1
            # Ελέγχουμε ότι η νέα θέση είναι εντός ορίων και μεγαλύτερη από την τρέχουσα
                if 0 <= new_row < m and grid[new_row][new_col] > grid[row][col]:
                    
                    max_move = max(max_move, 1 + dfs(new_row, new_col))
                    #print(max_move)
            return max_move

    # Ξεκινάμε από κάθε κελί της πρώτης στήλης και βρίσκουμε το μέγιστο
        return max(dfs(row, 0) for row in range(m))  

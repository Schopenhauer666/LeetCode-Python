#Approach it with two pointers. One on right side that gos from the end to the point where the array stops to be dicreasing.
#adn then check from the stat if the elemens is getting bigger until it reach right's value.
class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        removes=0
        right=len(arr)-1
        while right>0 and arr[right]>=arr[right-1]:
            right-=1
        
        ans=right
        left=0
        while left<right and (left==0 or arr[left-1]<=arr[left]):
            while right < len(arr) and arr[left]>arr[right]:
                right+=1
            
            ans=min(ans,right-left-1)
            left+=1
        return ans

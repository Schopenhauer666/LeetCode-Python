#This time we use a deque, which combine sliding windows with two-pointer technique.
class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
    #we create a prefix that starts with p[0]=0 and adds every numbers: 0,2,1,3 for example 3
        prefix_sum = [0] * (n + 1)
        for i in range(n):
            prefix_sum[i + 1] = prefix_sum[i] + nums[i]

    # Step 2: Initialize deque and result
        dq = deque()
        min_length = float('inf')

    # Step 3: Iterate through prefix sums. We chech if the current prefix-the first is eaqual to the target or even bigger (cause that means that maybe this string is the right one. we have to find the smallest subarray with at least k)
        for i in range(n + 1):
        # Check if we can find a valid subarray
            while dq and prefix_sum[i] - prefix_sum[dq[0]] >= k:
                min_length = min(min_length, i - dq.popleft())

        # Maintain increasing order in deque
            while dq and prefix_sum[i] <= prefix_sum[dq[-1]]:
                dq.pop()

        # Add current index to deque
            dq.append(i)

    # Return result
        return min_length if min_length != float('inf') else -1
        
